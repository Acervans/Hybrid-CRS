

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_cron" WITH SCHEMA "pg_catalog";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."increment_new_sessions"("agent_id" integer) RETURNS "void"
    LANGUAGE "plpgsql"
    SET "search_path" TO ''
    AS $$
BEGIN
  UPDATE public."RecommenderAgent"
  SET new_sessions = new_sessions + 1
  WHERE "RecommenderAgent".agent_id = agent_id;
END;
$$;


ALTER FUNCTION "public"."increment_new_sessions"("agent_id" integer) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_agent_visibility"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    SET "search_path" TO ''
    AS $$
BEGIN
  INSERT INTO "public"."RecommenderAgentVisibility" (agent_id, public)
  VALUES (NEW.agent_id, NEW.public)
  ON CONFLICT (agent_id)
  DO UPDATE SET public = EXCLUDED.public
  WHERE "RecommenderAgentVisibility".public IS DISTINCT FROM EXCLUDED.public;
  RETURN NULL;
END;
$$;


ALTER FUNCTION "public"."update_agent_visibility"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."ChatHistory" (
    "chat_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "chat_title" character varying,
    "agent_id" bigint,
    "archived" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."ChatHistory" OWNER TO "postgres";


ALTER TABLE "public"."ChatHistory" ALTER COLUMN "chat_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."ChatHistory_chat_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."RecommenderAgent" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "agent_id" bigint NOT NULL,
    "user_id" "uuid" DEFAULT "auth"."uid"() NOT NULL,
    "agent_name" character varying NOT NULL,
    "dataset_name" character varying NOT NULL,
    "public" boolean DEFAULT true NOT NULL,
    "description" character varying,
    "processed" boolean DEFAULT false NOT NULL,
    "username" character varying NOT NULL,
    "new_sessions" integer NOT NULL
);


ALTER TABLE "public"."RecommenderAgent" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."RecommenderAgentVisibility" (
    "agent_id" bigint NOT NULL,
    "public" boolean DEFAULT true NOT NULL
);


ALTER TABLE "public"."RecommenderAgentVisibility" OWNER TO "postgres";


ALTER TABLE "public"."RecommenderAgentVisibility" ALTER COLUMN "agent_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."RecommenderAgentVisibility_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."RecommenderAgent" ALTER COLUMN "agent_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."RecommenderAgent_agent_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."ChatHistory"
    ADD CONSTRAINT "ChatHistory_chat_id_key" UNIQUE ("chat_id");



ALTER TABLE ONLY "public"."ChatHistory"
    ADD CONSTRAINT "ChatHistory_pkey" PRIMARY KEY ("chat_id", "user_id");



ALTER TABLE ONLY "public"."RecommenderAgentVisibility"
    ADD CONSTRAINT "RecommenderAgentVisibility_pkey" PRIMARY KEY ("agent_id");



ALTER TABLE ONLY "public"."RecommenderAgent"
    ADD CONSTRAINT "RecommenderAgent_agent_id_key" UNIQUE ("agent_id");



ALTER TABLE ONLY "public"."RecommenderAgent"
    ADD CONSTRAINT "RecommenderAgent_pkey" PRIMARY KEY ("agent_id", "user_id");



CREATE UNIQUE INDEX "recommenderagent_user_id_agent_name_key" ON "public"."RecommenderAgent" USING "btree" ("user_id", "lower"(("agent_name")::"text"));



CREATE OR REPLACE TRIGGER "UpdateAgentVisibility" AFTER INSERT OR UPDATE ON "public"."RecommenderAgent" FOR EACH ROW EXECUTE FUNCTION "public"."update_agent_visibility"();



ALTER TABLE ONLY "public"."ChatHistory"
    ADD CONSTRAINT "ChatHistory_agent_id_fkey" FOREIGN KEY ("agent_id") REFERENCES "public"."RecommenderAgent"("agent_id");



ALTER TABLE ONLY "public"."ChatHistory"
    ADD CONSTRAINT "ChatHistory_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE ONLY "public"."RecommenderAgentVisibility"
    ADD CONSTRAINT "RecommenderAgentVisibility_id_fkey" FOREIGN KEY ("agent_id") REFERENCES "public"."RecommenderAgent"("agent_id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."RecommenderAgent"
    ADD CONSTRAINT "RecommenderAgent_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id");



ALTER TABLE "public"."ChatHistory" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."RecommenderAgent" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."RecommenderAgentVisibility" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "Users can access their own recommender agents and public agents" ON "public"."RecommenderAgent" FOR SELECT TO "authenticated" USING (((( SELECT "auth"."uid"() AS "uid") = "user_id") OR ("public" = true)));



CREATE POLICY "Users can create their own recommender agents" ON "public"."RecommenderAgent" FOR INSERT TO "authenticated" WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Users can create/access/update/delete their own chat histories" ON "public"."ChatHistory" TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Users can delete their own recommender agents" ON "public"."RecommenderAgent" FOR DELETE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Users can insert their own agent visibility" ON "public"."RecommenderAgentVisibility" FOR INSERT TO "authenticated" WITH CHECK ((EXISTS ( SELECT 1
   FROM "public"."RecommenderAgent"
  WHERE (("RecommenderAgent"."agent_id" = "RecommenderAgentVisibility"."agent_id") AND ("RecommenderAgent"."user_id" = ( SELECT "auth"."uid"() AS "uid"))))));



CREATE POLICY "Users can update their own agent visibility" ON "public"."RecommenderAgentVisibility" FOR UPDATE TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."RecommenderAgent"
  WHERE (("RecommenderAgent"."agent_id" = "RecommenderAgentVisibility"."agent_id") AND ("RecommenderAgent"."user_id" = ( SELECT "auth"."uid"() AS "uid"))))));



CREATE POLICY "Users can update their own recommender agents" ON "public"."RecommenderAgent" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Users can view all agents visibility" ON "public"."RecommenderAgentVisibility" FOR SELECT TO "authenticated" USING (true);





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";






ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."ChatHistory";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."RecommenderAgent";



ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."RecommenderAgentVisibility";






GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";
































































































































































































GRANT ALL ON FUNCTION "public"."increment_new_sessions"("agent_id" integer) TO "anon";
GRANT ALL ON FUNCTION "public"."increment_new_sessions"("agent_id" integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."increment_new_sessions"("agent_id" integer) TO "service_role";



GRANT ALL ON FUNCTION "public"."update_agent_visibility"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_agent_visibility"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_agent_visibility"() TO "service_role";
























GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."ChatHistory" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."ChatHistory" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."ChatHistory" TO "service_role";



GRANT ALL ON SEQUENCE "public"."ChatHistory_chat_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."ChatHistory_chat_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."ChatHistory_chat_id_seq" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."RecommenderAgent" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."RecommenderAgent" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."RecommenderAgent" TO "service_role";



GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."RecommenderAgentVisibility" TO "anon";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."RecommenderAgentVisibility" TO "authenticated";
GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE "public"."RecommenderAgentVisibility" TO "service_role";



GRANT ALL ON SEQUENCE "public"."RecommenderAgentVisibility_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."RecommenderAgentVisibility_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."RecommenderAgentVisibility_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."RecommenderAgent_agent_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."RecommenderAgent_agent_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."RecommenderAgent_agent_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT SELECT,INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLES TO "service_role";






























RESET ALL;
